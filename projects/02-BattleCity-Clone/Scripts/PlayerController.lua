---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by goforbroke.
--- DateTime: 12/29/23 2:44 PM
---

require "Core/LuaBehaviour"

PlayerController = {}

function PlayerController:Awake()
    self.motionSpeed = self.motionSpeed or 10.0
    self.reloading = self.reloading or 0.0
    self.reloadingTimeout = self.reloadingTimeout or 2.0
    self.projectilePrefab = self.projectilePrefab or GameObject:new(-1, "")
end

function PlayerController:Start()
    if (self.motionSpeed == 0.0) then
        Debug.LogWarning("motionSpeed should not be equals zero")
    end
    if (self.projectilePrefab == nil) then
        Debug.LogWarning("projectilePrefab should not be nil")
    end
end

function PlayerController:Update()
    if Input.GetButtonDown("Fire1") and self.reloading <= 0.0 then
        Debug.Log("Fire!!!")

        local projectile = Object.Instantiate(
                self.projectilePrefab,
                self.transform.position,
                self.transform.rotation
        );
        projectile:GetComponent(ProjectileController).senderObject = self.gameObject

        Debug.Log("Create projectile " .. projectile:GetInstanceID()
                .. " in " .. self.transform.position:ToString()
                .. " with " .. self.transform.rotation.eulerAngles:ToString()
        )

        --Debug.Log("Create projectile " .. projectile.__instanceID)
        self.reloading = self.reloadingTimeout
    end

    if self.reloading > 0.0 then
        self.reloading = self.reloading - Time.deltaTime
        if self.reloading <= 0.0 then
            Debug.Log("Projectile is loaded")
        else
            -- Debug.Log("Projectile will ready in " .. self.reloading .. " seconds")
        end
    end

    local verMove = Input.GetAxis("Vertical");
    local horMove = Input.GetAxis("Horizontal");

    if verMove ~= 0.0 then
        if verMove > 0 then
            self.transform.rotation = Quaternion.Euler(0, 0, 0);
        end
        if verMove < 0 then
            self.transform.rotation = Quaternion.Euler(0, -180, 0);
        end

        self.transform:Translate(Vector3.forward * math.abs(verMove) * self.motionSpeed * Time.deltaTime);
    else
        if horMove ~= 0.0 then
            if horMove > 0 then
                self.transform.rotation = Quaternion.Euler(0, 90, 0);
            end
            if horMove < 0 then
                self.transform.rotation = Quaternion.Euler(0, -90, 0);
            end

            self.transform:Translate(Vector3.forward * math.abs(horMove) * self.motionSpeed * Time.deltaTime);
        end
    end
end
