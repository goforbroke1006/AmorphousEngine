---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by goforbroke.
--- DateTime: 1/14/24 12:32 PM
---

--- https://docs.unity3d.com/ScriptReference/Object.html
Object = {
    __instanceID = -1,
}

function Object:new(__instanceID --[[integer]])
    __instanceID = __instanceID or -1

    local obj = {
        __instanceID = __instanceID,
    }

    self.__index = self
    setmetatable(obj, self)

    return obj
end

function Object:IsA(className --[[string]])
    return className == "Object"
end

--- https://docs.unity3d.com/ScriptReference/Object.GetInstanceID.html
--- int Returns the instance ID of the object.
function Object:GetInstanceID()
    return self.__instanceID;
end

--- https://docs.unity3d.com/ScriptReference/Object.ToString.html
--- string The name returned by ToString.
function Object:ToString()
    -- TODO: implement me
    return ""
end

--- https://docs.unity3d.com/ScriptReference/Object.Destroy.html
--- Removes a GameObject, component or asset.
--- obj     The object to destroy.
--- t       The optional amount of time to delay before destroying the object.
Object.Destroy = function(obj --[[Object]], t)
    t = t or 0.0

    if obj == nil then
        return
    end

    if not obj:IsA("GameObject") then
        Debug.LogError("Object.Destroy can work just with GameObject type for now")
        return
    end

    __all_game_objects[obj.__instanceID] = nil
    __all_components[obj.__instanceID] = nil
end

--- https://docs.unity3d.com/ScriptReference/Object.Instantiate.html
Object.Instantiate = function(original --[[GameObject]], arg1, arg2, arg3)
    if original == nil then
        Debug.LogError("'original' should not be nil")
        return
    end

    if not original:IsA("GameObject") then
        Debug.LogError("'original' should be GameObject")
        return
    end

    if __scene_next_game_object_instance_id == nil then
        __scene_next_game_object_instance_id = table_length(__all_game_objects)
    end

    local instance = GameObject:new(
            __scene_next_game_object_instance_id,
            original.name .. " (Clone)"
    )

    if arg1 == nil and arg2 == nil and arg3 == nil then
        --- public static Object Instantiate(Object original);

        instance.transform.position:Set(
                original.transform.position.x,
                original.transform.position.y,
                original.transform.position.z
        )
        instance.transform.rotation:Set(
                original.transform.rotation.x,
                original.transform.rotation.y,
                original.transform.rotation.z,
                original.transform.rotation.w
        )
        instance.transform.localScale:Set(
                original.transform.localScale.x,
                original.transform.localScale.y,
                original.transform.localScale.z
        )
    elseif arg1 ~= nil and arg1:IsA("Transform") and arg2 == nil and arg3 == nil then
        --- public static Object Instantiate(Object original, Transform parent);

        instance.transform.position:Set(
                arg1.position.x,
                arg1.position.y,
                arg1.position.z
        )
        instance.transform.rotation:Set(
                arg1.rotation.x,
                arg1.rotation.y,
                arg1.rotation.z,
                arg1.rotation.w
        )
        instance.transform.localScale:Set(
                arg1.localScale.x,
                arg1.localScale.y,
                arg1.localScale.z
        )
    elseif arg1 ~= nil and arg1:IsA("Transform") and type(arg2) == "bool" and arg3 == nil then
        --- public static Object Instantiate(Object original, Transform parent, bool instantiateInWorldSpace);

        -- TODO: implement me
        Debug.LogError("implement me")
    elseif arg1 ~= nil and arg1:IsA("Vector3") and arg2 ~= nil and arg2:IsA("Quaternion") and arg3 == nil then
        --- public static Object Instantiate(Object original, Vector3 position, Quaternion rotation);

        local initPos = Vector3:new(arg1.x, arg1.y, arg1.z);
        instance.transform.position = initPos;

        local origRotEuler = arg2.eulerAngles;
        instance.transform.rotation = Quaternion.Euler(origRotEuler.x, origRotEuler.y, origRotEuler.z);

        instance.transform.localScale:Set(
                original.transform.localScale.x,
                original.transform.localScale.y,
                original.transform.localScale.z
        )
    elseif arg1 ~= nil and arg1:IsA("Vector3") and arg2 ~= nil and arg2:IsA("Quaternion") and arg3 ~= nil and arg3:IsA("Transform") then
        --- public static Object Instantiate(Object original, Vector3 position, Quaternion rotation, Transform parent);

        -- TODO: implement me
        Debug.LogError("implement me")
    else
        Debug.LogError("Unexpected signature")
        return nil
    end

    __all_game_objects[instance.__instanceID] = instance;

    __all_components[instance.__instanceID] = {}

    -- create components for new instance
    for _, originCmp in pairs(original.__components) do
        local cmp = LuaBehaviour.__make_clone(originCmp)

        cmp.gameObject = instance
        cmp.transform = instance.transform

        if cmp['Awake'] ~= nil and type(cmp['Awake']) == "function"
                and cmp.enabled == true
        then
            cmp:Awake()
        end

        __all_components[instance.__instanceID][cmp.__type_name] = cmp

        Debug.LogTrace("Object.Instantiate " .. instance.name .. " add component " .. cmp.__type_name)
    end

    __scene_next_game_object_instance_id = __scene_next_game_object_instance_id + 1

    return instance
end

--- https://docs.unity3d.com/ScriptReference/Object.FindObjectOfType.html
function Object.FindObjectOfType(typeArg)
    local typeName = nil
    if type(typeArg) == "table" then
        typeName = getTableName(typeArg)
    elseif type(typeArg) == "string" then
        typeName = typeArg
    else
        Debug.LogWarning("unexpected type arg of " .. type(typeArg) .. " type")
        return nil
    end

    for _, cmpTable in pairs(__all_components) do
        for _, cmp in pairs(cmpTable) do
            if cmp.__type_name == typeName then
                return cmp
            end
        end
    end

    return nil
end

--- https://docs.unity3d.com/ScriptReference/Object.FindObjectsOfType.html
function Object.FindObjectsOfType(typeArg)
    local next_idx = 0
    local result = {}

    local typeName = nil
    if type(typeArg) == "table" then
        typeName = getTableName(typeArg)
    elseif type(typeArg) == "string" then
        typeName = typeArg
    else
        Debug.LogWarning("unexpected type arg of " .. type(typeArg) .. " type")
        return nil
    end

    for _, cmpTable in pairs(__all_components) do
        for _, cmp in pairs(cmpTable) do
            if cmp.__type_name == typeName then
                result[next_idx] = cmp
                next_idx = next_idx + 1
            end
        end
    end

    return result
end
