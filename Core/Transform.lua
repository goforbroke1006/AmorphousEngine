---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by goforbroke.
--- DateTime: 12/30/23 1:51 AM
---

require 'Core/Space'
require 'Core/Vector3'
require 'Core/Quaternion'

Transform = {
    position = Vector3:new(0.0, 0.0, 0.0),
    rotation = Quaternion:new(0.0, 0.0, 0.0, 0.0),
    localScale = Vector3:new(1.0, 1.0, 1.0),
}

function Transform:new()
    tr = {
        position = Vector3:new(0.0, 0.0, 0.0),
        rotation = Quaternion:new(0.0, 0.0, 0.0, 0.0),
        localScale = Vector3:new(1.0, 1.0, 1.0),
    }

    self.__index = self
    setmetatable(tr, self)

    return tr
end

function Transform:Translate(translation --[[Vector3]], relativeTo)
    --if (type(translation) ~= "Vector3") then
    --    error("translation has incompatible type " .. type(translation))
    --end

    relativeTo = relativeTo or Space.Self

    if (relativeTo == Space.Self) then
        local move = translation -- TODO: implement me with correct math

        self.position.x = self.position.x + move.x
        self.position.y = self.position.y + move.y
        self.position.z = self.position.z + move.z
    elseif (relativeTo == Space.World) then
        self.position.x = self.position.x + translation.x
        self.position.y = self.position.y + translation.y
        self.position.z = self.position.z + translation.z
    end
end

function Transform:Rotate(angleX, angleY, angleZ, relativeTo)
    relativeTo = relativeTo or Space.Self
    -- print('  Transform :: Rotate(' .. angleX .. ', ' .. angleY .. ', ' .. angleZ .. ', ' .. relativeTo .. ')')
end

function Transform:LookAt(target --[[Transform]], worldUp --[[Vector3]])
    worldUp = worldUp or Vector3.up
    --print('  Transform :: LookAt(target, ' .. worldUp .. ')')
end
